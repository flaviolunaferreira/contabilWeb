{"version":3,"file":"plugin.js","sources":["esm/definitions.js","esm/index.js","esm/web.js"],"sourcesContent":["//import { Capacitor } from '@capacitor/core';\n/**\n * SQLiteConnection Class\n */\nexport class SQLiteConnection {\n    constructor(sqlite) {\n        this.sqlite = sqlite;\n        this._connectionDict = new Map();\n    }\n    async initWebStore() {\n        try {\n            await this.sqlite.initWebStore();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async saveToStore(database) {\n        try {\n            await this.sqlite.saveToStore({ database });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async saveToLocalDisk(database) {\n        try {\n            await this.sqlite.saveToLocalDisk({ database });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getFromLocalDiskToStore(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.getFromLocalDiskToStore({ overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async echo(value) {\n        try {\n            const res = await this.sqlite.echo({ value });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isSecretStored() {\n        try {\n            const res = await this.sqlite.isSecretStored();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setEncryptionSecret(passphrase) {\n        try {\n            await this.sqlite.setEncryptionSecret({ passphrase: passphrase });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async changeEncryptionSecret(passphrase, oldpassphrase) {\n        try {\n            await this.sqlite.changeEncryptionSecret({\n                passphrase: passphrase,\n                oldpassphrase: oldpassphrase,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async clearEncryptionSecret() {\n        try {\n            await this.sqlite.clearEncryptionSecret();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async checkEncryptionSecret(passphrase) {\n        try {\n            const res = await this.sqlite.checkEncryptionSecret({\n                passphrase: passphrase,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addUpgradeStatement(database, upgrade) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.addUpgradeStatement({\n                database,\n                upgrade,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createConnection(database, encrypted, mode, version, readonly) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.createConnection({\n                database,\n                encrypted,\n                mode,\n                version,\n                readonly,\n            });\n            const conn = new SQLiteDBConnection(database, readonly, this.sqlite);\n            const connName = readonly ? `RO_${database}` : `RW_${database}`;\n            this._connectionDict.set(connName, conn);\n            /*\n            console.log(`*** in createConnection connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeConnection(database, readonly) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.closeConnection({ database, readonly });\n            const connName = readonly ? `RO_${database}` : `RW_${database}`;\n            this._connectionDict.delete(connName);\n            /*      console.log(`*** in closeConnection connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isConnection(database, readonly) {\n        const res = {};\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        const connName = readonly ? `RO_${database}` : `RW_${database}`;\n        res.result = this._connectionDict.has(connName);\n        return Promise.resolve(res);\n    }\n    async retrieveConnection(database, readonly) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        const connName = readonly ? `RO_${database}` : `RW_${database}`;\n        if (this._connectionDict.has(connName)) {\n            const conn = this._connectionDict.get(connName);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${database} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${database} does not exist`);\n        }\n    }\n    async getNCDatabasePath(path, database) {\n        try {\n            const databasePath = await this.sqlite.getNCDatabasePath({\n                path,\n                database,\n            });\n            return Promise.resolve(databasePath);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createNCConnection(databasePath, version) {\n        try {\n            await this.sqlite.createNCConnection({\n                databasePath,\n                version,\n            });\n            const conn = new SQLiteDBConnection(databasePath, true, this.sqlite);\n            const connName = `RO_${databasePath})`;\n            this._connectionDict.set(connName, conn);\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeNCConnection(databasePath) {\n        try {\n            await this.sqlite.closeNCConnection({ databasePath });\n            const connName = `RO_${databasePath})`;\n            this._connectionDict.delete(connName);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isNCConnection(databasePath) {\n        const res = {};\n        const connName = `RO_${databasePath})`;\n        res.result = this._connectionDict.has(connName);\n        return Promise.resolve(res);\n    }\n    async retrieveNCConnection(databasePath) {\n        if (this._connectionDict.has(databasePath)) {\n            const connName = `RO_${databasePath})`;\n            const conn = this._connectionDict.get(connName);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${databasePath} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${databasePath} does not exist`);\n        }\n    }\n    async isNCDatabase(databasePath) {\n        try {\n            const res = await this.sqlite.isNCDatabase({ databasePath });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async retrieveAllConnections() {\n        return this._connectionDict;\n    }\n    async closeAllConnections() {\n        const delDict = new Map();\n        try {\n            /*      console.log(`*** in closeAllConnections connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            for (const key of this._connectionDict.keys()) {\n                const database = key.substring(3);\n                const readonly = key.substring(0, 3) === 'RO_' ? true : false;\n                await this.sqlite.closeConnection({ database, readonly });\n                delDict.set(key, null);\n            }\n            for (const key of delDict.keys()) {\n                this._connectionDict.delete(key);\n            }\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async checkConnectionsConsistency() {\n        try {\n            const keys = [...this._connectionDict.keys()];\n            const openModes = [];\n            const dbNames = [];\n            for (const key of keys) {\n                openModes.push(key.substring(0, 2));\n                dbNames.push(key.substring(3));\n            }\n            const res = await this.sqlite.checkConnectionsConsistency({\n                dbNames: dbNames,\n                openModes: openModes,\n            });\n            if (!res.result)\n                this._connectionDict = new Map();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            this._connectionDict = new Map();\n            return Promise.reject(err);\n        }\n    }\n    async importFromJson(jsonstring) {\n        try {\n            const ret = await this.sqlite.importFromJson({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isJsonValid(jsonstring) {\n        try {\n            const ret = await this.sqlite.isJsonValid({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async copyFromAssets(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.copyFromAssets({ overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getFromHTTPRequest(url, overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.getFromHTTPRequest({ url, overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDatabaseEncrypted(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        try {\n            const res = await this.sqlite.isDatabaseEncrypted({ database: database });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isInConfigEncryption() {\n        try {\n            const res = await this.sqlite.isInConfigEncryption();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isInConfigBiometricAuth() {\n        try {\n            const res = await this.sqlite.isInConfigBiometricAuth();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDatabase(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        try {\n            const res = await this.sqlite.isDatabase({ database: database });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getDatabaseList() {\n        try {\n            const res = await this.sqlite.getDatabaseList();\n            const values = res.values;\n            values.sort();\n            const ret = { values: values };\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getMigratableDbList(folderPath) {\n        const path = folderPath ? folderPath : 'default';\n        try {\n            const res = await this.sqlite.getMigratableDbList({\n                folderPath: path,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addSQLiteSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.addSQLiteSuffix({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteOldDatabases(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.deleteOldDatabases({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async moveDatabasesAndAddSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        return this.sqlite.moveDatabasesAndAddSuffix({\n            folderPath: path,\n            dbNameList: dbList,\n        });\n    }\n}\n/**\n * SQLiteDBConnection Class\n */\nexport class SQLiteDBConnection {\n    constructor(dbName, readonly, sqlite) {\n        this.dbName = dbName;\n        this.readonly = readonly;\n        this.sqlite = sqlite;\n    }\n    getConnectionDBName() {\n        return this.dbName;\n    }\n    getConnectionReadOnly() {\n        return this.readonly;\n    }\n    async open() {\n        try {\n            await this.sqlite.open({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async close() {\n        try {\n            await this.sqlite.close({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async beginTransaction() {\n        try {\n            const changes = await this.sqlite.beginTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async commitTransaction() {\n        try {\n            const changes = await this.sqlite.commitTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async rollbackTransaction() {\n        try {\n            const changes = await this.sqlite.rollbackTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTransactionActive() {\n        try {\n            const result = await this.sqlite.isTransactionActive({\n                database: this.dbName,\n            });\n            return Promise.resolve(result);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async loadExtension(path) {\n        try {\n            await this.sqlite.loadExtension({\n                database: this.dbName,\n                path: path,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async enableLoadExtension(toggle) {\n        try {\n            await this.sqlite.enableLoadExtension({\n                database: this.dbName,\n                toggle: toggle,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getUrl() {\n        try {\n            const res = await this.sqlite.getUrl({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getVersion() {\n        try {\n            const version = await this.sqlite.getVersion({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(version);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getTableList() {\n        try {\n            const res = await this.sqlite.getTableList({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async execute(statements, transaction = true, isSQL92 = true) {\n        try {\n            if (!this.readonly) {\n                const res = await this.sqlite.execute({\n                    database: this.dbName,\n                    statements: statements,\n                    transaction: transaction,\n                    readonly: false,\n                    isSQL92: isSQL92,\n                });\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async query(statement, values, isSQL92 = true) {\n        let res;\n        try {\n            if (values && values.length > 0) {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: values,\n                    readonly: this.readonly,\n                    isSQL92: true,\n                });\n            }\n            else {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: [],\n                    readonly: this.readonly,\n                    isSQL92: isSQL92,\n                });\n            }\n            // reorder rows for ios\n            res = await this.reorderRows(res);\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async run(statement, values, transaction = true, returnMode = 'no', isSQL92 = true) {\n        let res;\n        try {\n            if (!this.readonly) {\n                if (values && values.length > 0) {\n                    res = await this.sqlite.run({\n                        database: this.dbName,\n                        statement: statement,\n                        values: values,\n                        transaction: transaction,\n                        readonly: false,\n                        returnMode: returnMode,\n                        isSQL92: true,\n                    });\n                }\n                else {\n                    res = await this.sqlite.run({\n                        database: this.dbName,\n                        statement: statement,\n                        values: [],\n                        transaction: transaction,\n                        readonly: false,\n                        returnMode: returnMode,\n                        isSQL92: isSQL92,\n                    });\n                }\n                // reorder rows for ios\n                res.changes = await this.reorderRows(res.changes);\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeSet(set, transaction = true, returnMode = 'no', isSQL92 = true) {\n        let res;\n        try {\n            if (!this.readonly) {\n                res = await this.sqlite.executeSet({\n                    database: this.dbName,\n                    set: set,\n                    transaction: transaction,\n                    readonly: false,\n                    returnMode: returnMode,\n                    isSQL92: isSQL92,\n                });\n                //      }\n                // reorder rows for ios\n                res.changes = await this.reorderRows(res.changes);\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isExists() {\n        try {\n            const res = await this.sqlite.isDBExists({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTable(table) {\n        try {\n            const res = await this.sqlite.isTableExists({\n                database: this.dbName,\n                table: table,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDBOpen() {\n        try {\n            const res = await this.sqlite.isDBOpen({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async delete() {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.deleteDatabase({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createSyncTable() {\n        try {\n            if (!this.readonly) {\n                const res = await this.sqlite.createSyncTable({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setSyncDate(syncdate) {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.setSyncDate({\n                    database: this.dbName,\n                    syncdate: syncdate,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getSyncDate() {\n        try {\n            const res = await this.sqlite.getSyncDate({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            let retDate = '';\n            if (res.syncDate > 0)\n                retDate = new Date(res.syncDate * 1000).toISOString();\n            return Promise.resolve(retDate);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async exportToJson(mode, encrypted = false) {\n        try {\n            const res = await this.sqlite.exportToJson({\n                database: this.dbName,\n                jsonexportmode: mode,\n                readonly: this.readonly,\n                encrypted: encrypted,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteExportedRows() {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.deleteExportedRows({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeTransaction(txn, isSQL92 = true) {\n        let changes = 0;\n        let isActive = false;\n        if (!this.readonly) {\n            await this.sqlite.beginTransaction({\n                database: this.dbName,\n            });\n            isActive = await this.sqlite.isTransactionActive({\n                database: this.dbName,\n            });\n            if (!isActive) {\n                return Promise.reject('After Begin Transaction, no transaction active');\n            }\n            try {\n                for (const task of txn) {\n                    if (typeof task !== 'object' || !('statement' in task)) {\n                        throw new Error('Error a task.statement must be provided');\n                    }\n                    if ('values' in task && task.values && task.values.length > 0) {\n                        const retMode = task.statement.toUpperCase().includes('RETURNING') ? 'all' : 'no';\n                        const ret = await this.sqlite.run({\n                            database: this.dbName,\n                            statement: task.statement,\n                            values: task.values,\n                            transaction: false,\n                            readonly: false,\n                            returnMode: retMode,\n                            isSQL92: isSQL92,\n                        });\n                        if (ret.changes.changes < 0) {\n                            throw new Error('Error in transaction method run ');\n                        }\n                        changes += ret.changes.changes;\n                    }\n                    else {\n                        const ret = await this.sqlite.execute({\n                            database: this.dbName,\n                            statements: task.statement,\n                            transaction: false,\n                            readonly: false,\n                        });\n                        if (ret.changes.changes < 0) {\n                            throw new Error('Error in transaction method execute ');\n                        }\n                        changes += ret.changes.changes;\n                    }\n                }\n                // commit\n                const retC = await this.sqlite.commitTransaction({\n                    database: this.dbName,\n                });\n                changes += retC.changes.changes;\n                const retChanges = { changes: { changes: changes } };\n                return Promise.resolve(retChanges);\n            }\n            catch (err) {\n                // rollback\n                const msg = err.message ? err.message : err;\n                await this.sqlite.rollbackTransaction({\n                    database: this.dbName,\n                });\n                return Promise.reject(msg);\n            }\n        }\n        else {\n            return Promise.reject('not allowed in read-only mode');\n        }\n    }\n    async reorderRows(res) {\n        const retRes = res;\n        if (res?.values && typeof res.values[0] === 'object') {\n            if (Object.keys(res.values[0]).includes('ios_columns')) {\n                const columnList = res.values[0]['ios_columns'];\n                const iosRes = [];\n                for (let i = 1; i < res.values.length; i++) {\n                    const rowJson = res.values[i];\n                    const resRowJson = {};\n                    for (const item of columnList) {\n                        resRowJson[item] = rowJson[item];\n                    }\n                    iosRes.push(resRowJson);\n                }\n                retRes['values'] = iosRes;\n            }\n        }\n        return Promise.resolve(retRes);\n    }\n}\n//# sourceMappingURL=definitions.js.map","import { registerPlugin } from '@capacitor/core';\nconst CapacitorSQLite = registerPlugin('CapacitorSQLite', {\n    web: () => import('./web').then((m) => new m.CapacitorSQLiteWeb()),\n    electron: () => window.CapacitorCustomPlatform.plugins.CapacitorSQLite,\n});\nexport { CapacitorSQLite };\nexport * from './definitions';\n//# sourceMappingURL=index.js.map","import { WebPlugin } from '@capacitor/core';\nexport class CapacitorSQLiteWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.jeepSqliteElement = null;\n        this.isWebStoreOpen = false;\n    }\n    async initWebStore() {\n        await customElements.whenDefined('jeep-sqlite');\n        this.jeepSqliteElement = document.querySelector('jeep-sqlite');\n        this.ensureJeepSqliteIsAvailable();\n        this.jeepSqliteElement.addEventListener('jeepSqliteImportProgress', (event) => {\n            this.notifyListeners('sqliteImportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteExportProgress', (event) => {\n            this.notifyListeners('sqliteExportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteHTTPRequestEnded', (event) => {\n            this.notifyListeners('sqliteHTTPRequestEndedEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqlitePickDatabaseEnded', (event) => {\n            this.notifyListeners('sqlitePickDatabaseEndedEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteSaveDatabaseToDisk', (event) => {\n            this.notifyListeners('sqliteSaveDatabaseToDiskEvent', event.detail);\n        });\n        if (!this.isWebStoreOpen) {\n            this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n        }\n        return;\n    }\n    async saveToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromLocalDiskToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromLocalDiskToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async saveToLocalDisk(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToLocalDisk(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async echo(options) {\n        this.ensureJeepSqliteIsAvailable();\n        const echoResult = await this.jeepSqliteElement.echo(options);\n        return echoResult;\n    }\n    async createConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.createConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async open(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.open(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async closeConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.closeConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getVersion(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const versionResult = await this.jeepSqliteElement.getVersion(options);\n            return versionResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async checkConnectionsConsistency(options) {\n        this.ensureJeepSqliteIsAvailable();\n        try {\n            const consistencyResult = await this.jeepSqliteElement.checkConnectionsConsistency(options);\n            return consistencyResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async close(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.close(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async beginTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.beginTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async commitTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.commitTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async rollbackTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.rollbackTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isTransactionActive(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const result = await this.jeepSqliteElement.isTransactionActive(options);\n            return result;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getTableList(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableListResult = await this.jeepSqliteElement.getTableList(options);\n            return tableListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async execute(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.execute(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async executeSet(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.executeSet(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async run(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const runResult = await this.jeepSqliteElement.run(options);\n            return runResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async query(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const queryResult = await this.jeepSqliteElement.query(options);\n            return queryResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const dbExistsResult = await this.jeepSqliteElement.isDBExists(options);\n            return dbExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBOpen(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDBOpenResult = await this.jeepSqliteElement.isDBOpen(options);\n            return isDBOpenResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDatabaseResult = await this.jeepSqliteElement.isDatabase(options);\n            return isDatabaseResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isTableExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableExistsResult = await this.jeepSqliteElement.isTableExists(options);\n            return tableExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteDatabase(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isJsonValid(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isJsonValidResult = await this.jeepSqliteElement.isJsonValid(options);\n            return isJsonValidResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async importFromJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const importFromJsonResult = await this.jeepSqliteElement.importFromJson(options);\n            return importFromJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async exportToJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const exportToJsonResult = await this.jeepSqliteElement.exportToJson(options);\n            return exportToJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async createSyncTable(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const createSyncTableResult = await this.jeepSqliteElement.createSyncTable(options);\n            return createSyncTableResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async setSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.setSyncDate(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const getSyncDateResult = await this.jeepSqliteElement.getSyncDate(options);\n            return getSyncDateResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteExportedRows(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteExportedRows(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async addUpgradeStatement(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.addUpgradeStatement(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async copyFromAssets(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.copyFromAssets(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromHTTPRequest(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromHTTPRequest(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getDatabaseList() {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const databaseListResult = await this.jeepSqliteElement.getDatabaseList();\n            return databaseListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    /**\n     * Checks if the `jeep-sqlite` element is present in the DOM.\n     * If it's not in the DOM, this method throws an Error.\n     *\n     * Attention: This will always fail, if the `intWebStore()` method wasn't called before.\n     */\n    ensureJeepSqliteIsAvailable() {\n        if (this.jeepSqliteElement === null) {\n            throw new Error(`The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.`);\n        }\n    }\n    ensureWebstoreIsOpen() {\n        if (!this.isWebStoreOpen) {\n            /**\n             * if (!this.isWebStoreOpen)\n              this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n             */\n            throw new Error('WebStore is not open yet. You have to call \"initWebStore()\" first.');\n        }\n    }\n    ////////////////////////////////////\n    ////// UNIMPLEMENTED METHODS\n    ////////////////////////////////////\n    async getUrl() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getMigratableDbList(options) {\n        console.log('getMigratableDbList', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async addSQLiteSuffix(options) {\n        console.log('addSQLiteSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async deleteOldDatabases(options) {\n        console.log('deleteOldDatabases', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async moveDatabasesAndAddSuffix(options) {\n        console.log('moveDatabasesAndAddSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isSecretStored() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async setEncryptionSecret(options) {\n        console.log('setEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async changeEncryptionSecret(options) {\n        console.log('changeEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async clearEncryptionSecret() {\n        console.log('clearEncryptionSecret');\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async checkEncryptionSecret(options) {\n        console.log('checkEncryptionPassPhrase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getNCDatabasePath(options) {\n        console.log('getNCDatabasePath', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async createNCConnection(options) {\n        console.log('createNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async closeNCConnection(options) {\n        console.log('closeNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isNCDatabase(options) {\n        console.log('isNCDatabase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isDatabaseEncrypted(options) {\n        console.log('isDatabaseEncrypted', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isInConfigEncryption() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isInConfigBiometricAuth() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async loadExtension(options) {\n        console.log('loadExtension', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async enableLoadExtension(options) {\n        console.log('enableLoadExtension', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["registerPlugin","WebPlugin"],"mappings":"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"}